import{_ as a,c as n,a4 as i,o as e}from"./chunks/framework.C2O9Ofdp.js";const d=JSON.parse('{"title":"JS 中的闭包是什么？","description":"","frontmatter":{},"headers":[],"relativePath":"note/javascript/js-note2.md","filePath":"note/javascript/js-note2.md","lastUpdated":null}'),l={name:"note/javascript/js-note2.md"};function p(r,s,t,h,k,o){return e(),n("div",null,s[0]||(s[0]=[i(`<h1 id="js-中的闭包是什么" tabindex="-1">JS 中的闭包是什么？ <a class="header-anchor" href="#js-中的闭包是什么" aria-label="Permalink to &quot;JS 中的闭包是什么？&quot;">​</a></h1><p>先来看一个闭包的写法：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> local </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> local</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> func </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这就是闭包，local 变量和 bar 函数就组成了一个闭包（Closure）。</p><p>我对闭包的理解：</p><p><strong>「函数」和「函数内部能访问到的变量」的总和，就是一个闭包。</strong></p><p>就这么简单。</p><p>有的同学就疑惑了，闭包这么简单么？</p><p><strong>「我听说闭包是需要函数套函数，然后 return 一个函数的呀！」</strong></p><h4 id="为什么要函数套函数呢" tabindex="-1">为什么要函数套函数呢？ <a class="header-anchor" href="#为什么要函数套函数呢" aria-label="Permalink to &quot;为什么要函数套函数呢？&quot;">​</a></h4><p>是因为需要局部变量，所以才把 local 放在一个函数里，如果不把 local 放在一个函数里，local 就是一个全局变量了，达不到使用闭包的目的——隐藏变量。</p><p>有些人看到「闭包」这个名字，就一定觉得要用什么包起来才行。其实这是翻译问题，闭包的原文是 Closure，跟「包」没有任何关系。</p><p>所以函数套函数只是为了造出一个局部变量，跟闭包无关。</p><h4 id="为什么要-return-bar-呢" tabindex="-1">为什么要 return bar 呢？ <a class="header-anchor" href="#为什么要-return-bar-呢" aria-label="Permalink to &quot;为什么要 return bar 呢？&quot;">​</a></h4><p>因为如果不 return，你就无法使用这个闭包。把 return bar 改成 window.bar = bar 也是一样的，只要让外面可以访问到这个 bar 函数就行了。</p><p>所以 return bar 只是为了 bar 能被使用，也跟闭包无关。</p><h4 id="闭包的作用" tabindex="-1">闭包的作用 <a class="header-anchor" href="#闭包的作用" aria-label="Permalink to &quot;闭包的作用&quot;">​</a></h4><p>闭包常常用来「间接访问一个变量」。换句话说，「隐藏一个变量」。</p><p><strong>其实只要你懂了 JS 的作用域，你自然而然就懂了闭包，即使你不知道那就是闭包！</strong></p>`,19)]))}const b=a(l,[["render",p]]);export{d as __pageData,b as default};
